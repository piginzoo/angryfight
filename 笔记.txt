    /**
     * 在2D 编程中，屏幕坐标的原点是屏幕的左上角，横向向右增大，纵向向下增大
     * Paint，它决定了文字或图形的颜色，字体，线条粗细等等
     * 
     * 	Canvas，Canvas 一般翻译成画布，所有的绘图操作都是通过Canvas 中的函数来完成的，比如显示文字的函数Canvas.drawText()，显示位图的函数Canvas.drawBitmap()，
		以及各种绘制图形的函数如Canvas.drawRect()，Canvas.drawArc()等等。最后一个参数是Paint，通常翻译成画笔，它决定了文字或图形的颜色，字体，线条粗细等等
		得到Bitmap 实例的方法也有很多种，这里只介绍其中的一种:res = context.getResources(); BitmapFactory.decodeResource(res, id);
		画面刷新频繁、实时性强的，更有很多的NPC 需要处理，绘图的工作量也很大，要用一个新的视图类SurfaceView 代替View 来完成显示工作。
		SurfaceView 与View 有一些不同，但是我们只用其中的一个特性：在主线程之外的线程中向屏幕上绘图。这样就可以避免在画图任务繁重的时候造成主线程阻塞，从而提高程序的反应速度。
		
		加载图片方法总结（注意：getResources()其实是myContext.getResources()）
		1.适用于背景
		private Bitmap score_bar_bg = BitmapFactory.decodeResource(getResources(), R.drawable.score_bar_bg);// 分数条的背景图片
		canvas.drawBitmap(score_bar_bg, X方向位置, Y方向位置, null);// 绘制score_bar_bg
		2.适用于某边的位置有要求时
		private Drawable score_bar_bg = getResources().getDrawable(R.drawable.score_bar_bg);
		score_bar_bg.setBounds(距左端距离(left）, 距顶端距离（top）,  距右端距离（right）, 距底端距离（bottom）);
		myScoreBarBGImage.draw(canvas);
		3.其他
		private Bitmap score_bar_bg =Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.score_bar_bg),宽,  高, true);
		canvas.drawBitmap(score_bar_bg, X方向位置, Y方向位置,null);
		综上 还是第3种好啊
     */